import matplotlib.pyplot as plt
import numpy as np
from matplotlib import pyplot as plt
import cv2 
import math




img1 = cv2.imread('girasol1.png')
img2 = cv2.imread('girasol2.png')

#Dimencionamiento en bruto
c_imag1 = cv2.resize(img1, dsize = (300, 350), interpolation=cv2.INTER_CUBIC)
c_imag2 = cv2.resize(img2, dsize = (300, 350), interpolation=cv2.INTER_CUBIC)



#Imprimo matrices de la imagen 1
print(c_imag1)
print("------------1------------")

#Imprimo matrices de la imagen 2
print(c_imag2)
print("------------2------------")

cv2.imshow('Girasol1',c_imag1)
cv2.imshow('Girasol2',c_imag2)

H = cv2.waitKey (0) & 0xFF
if H == ord('h'):

    #Comenzando con la suma de imagenes
    #---------------------------------------------------------------#
    #Metodologia 1
    sum_imag = cv2.add(c_imag1,c_imag2)
    cv2.imshow('Suma',sum_imag)
    cv2.waitKey(0)

    #Metodologia2
    sum2_imag = c_imag1 + c_imag2
    cv2.imshow('Suma2',sum2_imag)
    cv2.waitKey(0)

    #Metodologia3
    sum3_imag = cv2.addWeighted(c_imag1, 0.5, c_imag2, 0.5, 0)
    cv2.imshow('Suma3',sum3_imag)
    cv2.waitKey(0)

    combinado1 = np.concatenate((c_imag1,sum_imag,c_imag2), axis=1)  #Concatenar
    combinado1 = cv2.cvtColor(combinado1, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado1)
    plt.axis('off')
    plt.show()

    combinado12 = np.concatenate((c_imag1,sum2_imag,c_imag2), axis=1)  #Concatenar
    combinado12 = cv2.cvtColor(combinado12,cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado12)
    plt.axis('off')
    plt.show()

    combinado13 = np.concatenate((c_imag1,sum3_imag,c_imag2), axis=1)  #Concatenar
    combinado13 = cv2.cvtColor(combinado13, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado13)
    plt.axis('off')
    plt.show()

    #La resta de las imagenes
    #---------------------------------------------------------------#
    res_imag = cv2.subtract(c_imag1,c_imag2)
    cv2.imshow('Resta',res_imag)
    cv2.waitKey()

    #Sustraccion
    Sustraccion = cv2.subtract(c_imag1,c_imag2)
    cv2.imshow('Sustraccion',Sustraccion)
    cv2.waitKey()


    #Absdiff
    Absdiff = cv2.absdiff(c_imag1,c_imag2)
    cv2.imshow('Absdiff',Absdiff)
    cv2.waitKey()

    combinado2 = np.concatenate((c_imag1,res_imag,c_imag2), axis=1 ) #Concatenar
    combinado2 = cv2.cvtColor(combinado2, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado2)
    plt.axis('off')
    plt.show()

    combinado22 = np.concatenate((c_imag1,Sustraccion,c_imag2), axis=1 ) #Concatenar
    combinado22 = cv2.cvtColor(combinado22, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado22)
    plt.axis('off')
    plt.show()

    combinado23 = np.concatenate((c_imag1,Absdiff,c_imag2), axis=1 ) #Concatenar
    combinado23 = cv2.cvtColor(combinado23, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado23)
    plt.axis('off')
    plt.show()



    #La divisi贸n de la imagen
    #---------------------------------------------------------------#
    div_imag = cv2.divide(c_imag1, c_imag2)
    print(div_imag)
    cv2.imshow('Divisi贸n',div_imag)


    cv2.waitKey(0)


    #La multiplicaci贸n de imagenes
    #---------------------------------------------------------------#
    mul_imag = cv2.multiply(c_imag1, c_imag2)
    print(mul_imag)
    cv2.imshow('Multiplicaci贸n',mul_imag)


    cv2.waitKey(0)

    #Logaritmo natural
    #---------------------------------------------------------------#
    c = 255 / np.log(1 + np.max(img1)) 
    log_image = c * (np.log(img1 + 1)) 
    log_image = np.array(log_image, dtype = np.uint8) 
    cv2.imshow('Logaritmo',log_image) 
    cv2.waitKey(0)

    #Raiz cuadrada
    Raiz = (img1**(0.5))
    cv2.imshow('Raiz',Raiz)
    cv2.waitKey()


    ###################### DERIVADA ##############################

    #Derivada

    Derivada = cv2.Laplacian(img1,cv2.CV_32F)
    cv2.imshow('Derivada',Derivada)
    cv2.waitKey()

        

    ###################### POTENCIA ##############################

    #Potencia
    Potencia = np.zeros(c_imag1.shape, c_imag1.dtype)
    g = 0.5
    Potencia = c * np.power(c_imag1,g)
    maxi1 = np.amax(Potencia)
    Potencia = np.uint8(Potencia/maxi1 * 255)
        
    cv2.imshow('Potencia',Potencia)
    cv2.waitKey()


    #Pow
    Pow = cv2.pow(c_imag1,2)
    cv2.imshow('Pow',Pow)
    cv2.waitKey()
    cv2.destroyAllWindows()

    #Potencia
    Pote=(c_imag1^2)
    cv2.imshow('Pote',Pote)
    cv2.waitKey()
    cv2.destroyAllWindows()


    combinado8 = np.concatenate((c_imag1,Potencia,c_imag2), axis=1 ) #Concatenar
    combinado8 = cv2.cvtColor(combinado8, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado8)
    plt.axis('off')
    plt.show()

    
    combinado81 = np.concatenate((c_imag1,Pow,c_imag2), axis=1 ) #Concatenar
    combinado81 = cv2.cvtColor(combinado81, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado81)
    plt.axis('off')
    plt.show()

    combinado82 = np.concatenate((c_imag1,Pote,c_imag2), axis=1 ) #Concatenar
    combinado82 = cv2.cvtColor(combinado82, cv2.COLOR_BGR2RGB)
    #Mostrar Imagen combinada
    plt.imshow(combinado82)
    plt.axis('off')
    plt.show()


    

    cv2.waitKey(0) #Retardo
    cv2.destroyAllWindows()

